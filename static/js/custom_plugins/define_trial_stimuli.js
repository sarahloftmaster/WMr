
/*****************************************/
/*****************************************/
/* 1. STIMULI AND TRIAL DEFINITIONS
/*****************************************/
/*****************************************/

/*****************************************/
/* 1.1 Trial data import/creation */
/*****************************************/
console.log('Define trial data');

/* This stuff will stay */
var train_keys = [74,75,76];
var test_keys = train_keys;

/* define variables (similar function to old csv) */
/*This could eventually be replaced by a csv import */
/* haters will say this is terrible and inefficient, and be correct */
var block = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14]; /* we do need this to define blocks */
var img_folder = [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11]; /* this neeeds to be concatenated and then imported */
var img_num = [2,6,1,1,6,2,6,1,2,2,6,1,2,1,6,6,2,6,1,2,2,1,6,1,1,2,6,1,6,2,2,1,2,6,6,1,6,2,1,4,1,5,3,2,6,6,3,5,2,1,4,2,4,6,5,1,3,4,1,5,3,2,6,3,4,2,1,6,5,5,6,2,4,3,4,1,2,1,3,5,5,6,2,4,1,6,3,5,6,4,3,2,1,1,2,1,3,5,6,2,4,4,6,3,6,5,1,3,5,2,4,2,1,5,3,6,6,6,4,1,1,4,6,4,1,6,6,4,1,6,1,4,4,6,4,1,6,6,1,4,1,1,6,4,1,4,6,6,1,6,4,4,1,4,6,1,2,3,5,5,3,2,3,5,2,2,3,5,2,5,3,3,2,3,5,2,2,5,3,5,5,2,3,5,3,2,2,5,2,3,3,5,3,2,5,3,2,6,4,1,5,5,4,6,1,2,3,1,3,5,6,2,4,3,2,6,4,1,5,4,3,1,2,5,6,6,5,1,3,4,3,2,1,2,4,6,6,5,1,3,2,5,4,6,5,3,4,1,2,2,1,2,4,6,5,1,3,3,5,4,5,6,2,4,6,1,3,1,2,6,4,5,5,3,6,4,4,6,3,6,4,3,3,6,4,3,4,6,6,3,6,4,3,3,4,6,4,4,3,6,4,6,3,3,4,3,6,6,4,6,3,4,6,2,4,1,3,5,5,1,4,3,2,6,3,6,5,4,2,1,6,2,4,1,3,5,1,6,3,2,5,4,4,5,3,6,1,6,2,3,2,1,4,4,5,3,6,2,5,1,4,5,6,1,3,2,2,3,2,1,4,5,3,6,6,5,1,5,4,2,1,4,3,6,3,2,4,1,5,5,1,4,6,3,5,2,2,3,6,5,4,1,5,1,2,6,4,3,1,4,6,3,5,2,3,1,5,4,2,6,6,2,5,1,3,1,4,5,4,3,6,6,2,5,1,4,2,3,6,2,1,3,5,4,4,5,4,3,6,2,5,1,1,2,3,2,6,4,3,6,5,1,5,4,6,3,2,2,4,6,1,1,6,4,6,1,4,4,6,1,4,1,6,6,4,6,1,4,4,1,6,1,1,4,6,1,6,4,4,1,4,6,6,1,6,4,1,1,6,5,5,6,1,6,5,1,1,6,5,1,5,6,6,1,6,5,1,1,5,6,5,5,1,6,5,6,1,1,5,1,6,6,5,6,1,5,1,6,3,5,2,4,4,5,3,2,6,1,2,1,4,3,6,5,1,6,3,5,2,4,5,1,2,6,4,3,3,4,2,1,5,1,6,2,6,5,3,3,4,2,1,6,4,5,3,4,1,5,2,6,6,2,6,5,3,4,2,1,1,4,5,4,3,6,5,3,2,1,2,6,3,5,4,4,5,1,6,6,1,5,1,6,5,5,1,6,5,6,1,1,5,1,6,5,5,6,1,6,6,5,1,6,1,5,5,6,5,1,1,6,1,5,6,4,3,5,1,6,2,2,1,5,6,3,4,6,4,2,5,3,1,4,3,5,1,6,2,1,4,6,3,2,5,5,2,6,4,1,4,3,6,3,1,5,5,2,6,4,3,2,1,5,2,4,1,6,3,3,6,3,1,5,2,6,4,4,2,1,2,5,3,1,5,6,4,6,3,5,1,2,2,2,3,5,5,3,2,3,5,2,2,3,5,2,5,3,3,2,3,5,2,2,5,3,5,5,2,3,5,3,2,2,5,2,3,3,5,3,2,5]; /*this needs to be concatenated and then imported */
var correct_key = [74,75,75,75,75,74,75,75,74,74,75,75,74,75,75,75,74,75,75,74,74,75,75,75,75,74,75,75,75,74,74,75,74,75,75,75,75,74,75,74,74,75,75,76,76,76,75,75,76,74,74,76,74,76,75,74,75,74,74,75,75,76,76,75,74,76,74,76,75,75,76,76,74,75,74,74,76,74,75,75,75,76,76,74,74,76,75,75,76,74,75,76,74,74,76,74,75,75,76,76,74,74,76,75,76,75,74,75,75,76,74,76,74,75,75,76,76,74,76,76,76,76,74,76,76,74,74,76,76,74,76,76,76,74,76,76,74,74,76,76,76,76,74,76,76,76,74,74,76,74,76,76,76,76,74,76,75,75,74,74,75,75,75,74,75,75,75,74,75,74,75,75,75,75,74,75,75,74,75,74,74,75,75,74,75,75,75,74,75,75,75,74,75,75,74,75,75,76,76,74,74,74,76,76,74,75,75,74,75,74,76,75,76,75,75,76,76,74,74,76,75,74,75,74,76,76,74,74,75,76,75,75,74,75,76,76,76,74,74,75,75,74,76,76,74,75,76,74,75,75,74,75,76,76,74,74,75,75,74,76,74,76,75,76,76,74,75,74,75,76,76,74,74,76,75,76,76,75,76,75,76,76,76,75,76,76,76,75,75,76,75,76,76,76,76,75,76,76,76,75,76,75,76,76,76,76,75,75,76,75,76,76,76,76,74,74,75,75,75,74,74,75,76,76,75,76,75,74,76,74,76,76,74,74,75,75,74,76,75,76,75,74,74,75,75,76,74,76,76,75,76,74,74,74,75,75,76,76,75,74,74,75,76,74,75,76,76,75,76,74,74,75,75,76,76,75,74,75,74,76,74,74,75,76,75,76,74,74,75,75,74,74,75,75,76,76,76,75,75,76,74,74,76,74,76,75,74,75,74,74,75,75,76,76,75,74,76,74,76,75,75,76,76,74,75,74,74,76,74,75,75,75,76,76,74,74,76,75,75,76,74,75,76,74,74,76,74,75,75,76,76,74,74,76,75,76,75,74,75,75,76,74,76,74,75,75,76,76,74,76,76,76,76,74,76,76,74,74,76,76,74,76,76,76,74,76,76,74,74,76,76,76,76,74,76,76,76,74,74,76,74,76,76,76,76,74,76,75,75,74,74,75,75,75,74,75,75,75,74,75,74,75,75,75,75,74,75,75,74,75,74,74,75,75,74,75,75,75,74,75,75,75,74,75,75,74,75,75,76,76,74,74,74,76,76,74,75,75,74,75,74,76,75,76,75,75,76,76,74,74,76,75,74,75,74,76,76,74,74,75,76,75,75,74,75,76,76,76,74,74,75,75,74,76,76,74,75,76,74,75,75,74,75,76,76,74,74,75,75,74,76,74,76,75,76,76,74,75,74,75,76,76,74,74,76,75,76,76,75,76,75,76,76,76,75,76,76,76,75,75,76,75,76,76,76,76,75,76,76,76,75,76,75,76,76,76,76,75,75,76,75,76,76,76,76,74,74,75,75,75,74,74,75,76,76,75,76,75,74,76,74,76,76,74,74,75,75,74,76,75,76,75,74,74,75,75,76,74,76,76,75,76,74,74,74,75,75,76,76,75,74,74,75,76,74,75,76,76,75,76,74,74,75,75,76,76,75,74,75,74,76,74,74,75,76,75,76,74,74,75,75,75,74,74,74,74,75,74,74,75,75,74,74,75,74,74,74,75,74,74,75,75,74,74,74,74,75,74,74,74,75,75,74,75,74,74,74,74,75,74]; /*this needs to be imported */
var gives_reward = [1,1,1,1,1,1,0,1,1,1,1,1,1,0,1,1,0,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,0,1,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,0,1,0,0,1,1,1,1,1,1,1,0,1,1,1,1,0,0,1,1,0,1,1,0,1,0,1,0,1,1,1,0,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,0,0,0,0,0,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,0,1,0,1,1,1,0,0,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,0,1,0,1,1,0,0,1,0,1,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,0,0,1,1,0,1,1,1,0,0,0,0,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,0,1,1,1,0,1,1,1,1,0,0,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,0,1,1,0,0,1,1];

// turn the gives reward into the actual feedback image to display
var correct = []
var incorrect = []
gives_reward.forEach(function(item){
	if (item==1){
		correct.push(reward_img);
		incorrect.push(punish_img);
	}
	else if (item==0){
		correct.push(punish_img);
		incorrect.push(reward_img);		
	}
});

// UGLY DATA IMPORT OVER


/*****************************************/
/* 1.2 Convert raw data variables into usable arrays of dictionaries */
/*****************************************/


//1.2.1 Get block info

// Finds the numbers of blocks by selecting the highest value
// E.g. if you enter [1,2,5,3,2] it returns 5
// var n_blocks = block.sort()[block.length-1]; This is bugged right now

var n_blocks = 14;

// Finds the exact numbers for the blocks
// E.g. if you enter [1,2,3,3,3,3] it returns [1,2,3]
function onlyUnique(value, index, self) { 
    return self.indexOf(value) === index;
}
var block_nums = block.filter( onlyUnique );

// 1.2.2 Make your image path variables

/* initialize empty variables for image path */
var img_paths = [];
var img_path_base = 'static/img/stimuli/';

/* create new image path variables to be called */
img_num.forEach(function(item, index, array) {
	img_paths.push(img_path_base + 'images' + img_folder[index] + '/image' + img_num[index] + '.jpg');
	// img_paths.push('<img class="stimuli-image" src="' + img_path_base + 'images' + img_folder[index] + '/image' + img_num[index] + '.jpg></img>');
	// ^ if you wanted to put an img tag in
	console.log(img_paths);
});

// 1.2.3 Create overall list of stimuli
stimuli_list = [];
block.forEach(function(item, index, array) {
	var single_stim_array = [block[index],img_paths[index],correct_key[index], gives_reward[index], correct[index], incorrect[index]];
	stimuli_list.push(single_stim_array);
});

// 1.2.4 Create dictionary of all the stimuli
stimuli_dict_list = []
stimuli_list.forEach(function(item, index, array) {
	console.log(item);
	var temp_dict = {};
	temp_dict['block'] = item[0];
	temp_dict['stimulus'] = item[1];
	temp_dict['key_answer'] = item[2];
	temp_dict['gives_reward'] = item[3];
	temp_dict['correct_text'] = item[4];
	temp_dict['incorrect_text'] = item[5];
	stimuli_dict_list.push(temp_dict);
});

// This dictionary can be used for the test phase!

// 1.2.5 Create a seperate dictionary for each block

// Function to make a dictionary for one block
function getBlockStimuli(block_num, list_of_dicts) {
	block_dict = []
	list_of_dicts.forEach(function(item, index, array){
	   if(item['block']==block_num){
	       block_dict.push(item);
	   }
	});	
	return block_dict

}

// Function to create a list of lists, with each sub list containing all 
// the stimuli for one specific block

stimuli_dicts_by_block = []
for (i = 1; i <= n_blocks; i++) {
	stimuli_dicts_by_block.push(getBlockStimuli(i,stimuli_dict_list))
}

console.log('Done creating dictionaries of stimuli!')
// This dictionary can be used for the training phase!


/*****************************************/
/* 1.3 Make the dictionary for the example training phase
/*****************************************/
// This is the stimuli info for the example training phase
// I am going to hard code it in, because it should not change
// Eventually you could make this dynamic as well

var example_stimuli_dicts = [
		{
			stimulus: 'static/img/stimuli/images99/image1.jpg',
			key_answer: 74,
			correct_text: reward_img,
			incorrect_text: punish_img
		},
		{
			stimulus: 'static/img/stimuli/images99/image2.jpg',
			key_answer: 74,
			correct_text: reward_img,
			incorrect_text: punish_img
		},
		{
			stimulus: 'static/img/stimuli/images99/image1.jpg',
			key_answer: 74,
			correct_text: reward_img,
			incorrect_text: punish_img
		},
		{
			stimulus: 'static/img/stimuli/images99/image1.jpg',
			key_answer: 74,
			correct_text: reward_img,
			incorrect_text: punish_img
		},
		{
			stimulus: 'static/img/stimuli/images99/image2.jpg',
			key_answer: 74,
			correct_text: reward_img,
			incorrect_text: punish_img
		}
	];


/*****************************************/
/* 1.4 Get additional data
/*****************************************/
//Commented out for now, since we aren't using it yet
//Need to figure out how to integrate

/*
// count_stimuli() returns a list with the number of stimuli
// in each block
function count_stimuli(block) {
	num_stimuli = []
	count = 1
	current_num = 0
	prev_num = 0

	// iterate through block list to determine where change in 
	// block occurs
	for (i = 0; i < length(block); i++) {
		current_num = block[i]

		// check if you're at end of block list
		if (i == length(block) - 1) {
			if (current_num == prev_num) {
				count++
				num_stimuli.push(count)
			} else {
				num_stimuli.push(count)
				num_stimuli.push(1)
			}
		} else {
			if (current_num != prev_num) {
				num_stimuli.push(count)
				count = 1
			} else {
				count++
				prev_num = current_num
			}
		}
	}
	return num_stimuli
}

var num_stimuli = count_stimuli(block)
*/